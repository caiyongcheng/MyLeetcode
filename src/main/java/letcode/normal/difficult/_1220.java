/*
 * 版权所有（c）<2021><蔡永程>
 *
 * 反996许可证版本1.0
 *
 * 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以
 * 下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括
 * 但不限于使用、复制，修改，衍生利用、散布，发布和再许可：
 *
 * 1. 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修
 * 改。
 * 2. 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（
 * 以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区
 * 没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际
 * 劳工标准的核心公约。
 * 3. 个人或法人不得以任何方式诱导、暗示或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意
 * 直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利
 * 或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任
 * 何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证
 * 的行为的权利。
 *
 * 该授权作品是"按原样"提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵
 * 权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或
 * 本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。
 */

package letcode.normal.difficult;

/**
 * 给你一个整数n，请你帮忙统计一下我们可以按下述规则形成多少个长度为n的字符串：
 * 字符串中的每个字符都应当是小写元音字母（'a', 'e', 'i', 'o', 'u'）
 * 每个元音'a'后面都只能跟着'e'
 * 每个元音'e'后面只能跟着'a'或者是'i'
 * 每个元音'i'后面不能 再跟着另一个'i'
 * 每个元音'o'后面只能跟着'i'或者是'u'
 * 每个元音'u'后面只能跟着'a'
 * 由于答案可能会很大，所以请你返回 模10^9 + 7之后的结果
 * 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/count-vowels-permutation
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author CaiYongcheng
 * @since 2022-01-17 09:10
 **/
public class _1220 {

    private static final int MOD = 1000000000 + 7;

    public int countVowelPermutation(int n) {
        /*
         * 考虑使用dp 长度为n的字符串可以由长度为n的构造出来
         */
        // a0 e1 i2 o3 u4
        int[] dp = new int[]{1, 1, 1, 1, 1};
        int[] tmp;
        int len = 1;
        while (len < n) {
            tmp = new int[]{0, 0, 0, 0, 0};
            tmp[0] = dp[1] % MOD;
            tmp[1] = ((dp[0] % MOD) + (dp[2] % MOD)) % MOD;
            tmp[2] = ((((((dp[0] % MOD) + (dp[1] % MOD)) % MOD) + (dp[3] % MOD)) % MOD) + (dp[4] % MOD)) % MOD;
            tmp[3] = ((dp[2] % MOD) + (dp[4] % MOD)) % MOD;
            tmp[4] = dp[0] % MOD;
            dp[0] = tmp[0];
            dp[1] = tmp[1];
            dp[2] = tmp[2];
            dp[3] = tmp[3];
            dp[4] = tmp[4];
            ++len;
        }
        return ((((((((dp[0] % MOD) + (dp[1] % MOD)) % MOD) + (dp[2] % MOD)) % MOD) + (dp[3] % MOD)) % MOD) + (dp[4] % MOD)) % MOD;
    }

    /**
     * 示例 1：
     * <p>
     * 输入：n = 1
     * 输出：5
     * 解释：所有可能的字符串分别是："a", "e", "i" , "o" 和 "u"。
     * 示例 2：
     * <p>
     * 输入：n = 2
     * 输出：10
     * 解释：所有可能的字符串分别是："ae", "ea", "ei", "ia", "ie", "io", "iu", "oi", "ou" 和 "ua"。
     * 示例 3：
     * <p>
     * 输入：n = 5
     * 输出：68
     * <p>
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/count-vowels-permutation
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param args
     */
    public static void main(String[] args) {
        System.out.println(new _1220().countVowelPermutation(
                5
        ));
    }


}
