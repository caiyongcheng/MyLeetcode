/*
 * 版权所有（c）<2021><蔡永程>
 *
 * 反996许可证版本1.0
 *
 * 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以
 * 下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括
 * 但不限于使用、复制，修改，衍生利用、散布，发布和再许可：
 *
 * 1. 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修
 * 改。
 * 2. 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（
 * 以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区
 * 没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际
 * 劳工标准的核心公约。
 * 3. 个人或法人不得以任何方式诱导、暗示或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意
 * 直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利
 * 或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任
 * 何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证
 * 的行为的权利。
 *
 * 该授权作品是"按原样"提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵
 * 权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或
 * 本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。
 */

package letcode.normal.difficult;

/**
 * 一条包含字母A-Z 的消息通过以下的方式进行了编码：  'A' -> 1 'B' -> 2 ... 'Z' -> 26
 * 要 解码 一条已编码的消息，所有的数字都必须分组，然后按原来的编码方案反向映射回字母（可能存在多种方式）。
 * 例如，"11106" 可以映射为：  "AAJF" 对应分组 (1 1 10 6) "KJF" 对应分组 (11 10 6)
 * 注意，像 (1 11 06) 这样的分组是无效的，因为 "06" 不可以映射为 'F' ，因为 "6" 与 "06" 不同。
 * 除了 上面描述的数字字母映射方案，编码消息中可能包含 '*' 字符，可以表示从 '1' 到 '9' 的任一数字（不包括 '0'）。
 * 例如，编码字符串 "1*" 可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条消息。
 * 对 "1*" 进行解码，相当于解码该字符串可以表示的任何编码消息。
 * 给你一个字符串 s ，由数字和 '*' 字符组成，返回 解码 该字符串的方法 数目 。
 * 由于答案数目可能非常大，返回对 109 + 7 取余 的结果。
 * 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/decode-ways-ii 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author CaiYongcheng
 * @date 2021-09-27 09:02
 **/
public class _639 {

    public int numDecodings(String s) {
        /*
         * s[i] 表示 从 [i,length-1]所能表示编码数目
         */
        final int mod = 1000000000 + 7;
        char[] chars = s.toCharArray();
        long[] dp = new long[chars.length];
        dp[chars.length - 1] = chars[chars.length - 1] == '*' ? 9 : chars[chars.length - 1] == '0' ? 0 : 1;
        for (int i = dp.length - 2; i >= 0; i--) {
            if (chars[i] == '0') {
                continue;
            }
            dp[i] = (dp[i] + dp[i + 1] * (chars[i] == '*' ? 9 : 1) % mod) % mod;
            long i2 = i + 2 < chars.length ? dp[i + 2] : 1;
            if (chars[i] == '1') {
                dp[i] = (dp[i] + i2 * (chars[i + 1] == '*' ? 9 : 1) % mod) % mod;
            }
            if (chars[i] == '2' && (chars[i + 1] == '*' || chars[i + 1] < '7')) {
                dp[i] = (dp[i] + i2 * (chars[i + 1] == '*' ? 6 : 1) % mod) % mod;
            }
            if (chars[i] == '*') {
                if (chars[i + 1] == '*') {
                    dp[i] = (dp[i] + 15 * i2 % mod) % mod;
                } else {
                    dp[i] = (dp[i] + i2 * (chars[i + 1] < '7' ? 2 : 1) % mod) % mod;
                }
            }
        }
        return (int) dp[0];
    }

    /**
     * 示例 1：
     * 输入：s = "*"
     * 输出：9
     * 解释：这一条编码消息可以表示 "1"、"2"、"3"、"4"、"5"、"6"、"7"、"8" 或 "9" 中的任意一条。
     * 可以分别解码成字符串 "A"、"B"、"C"、"D"、"E"、"F"、"G"、"H" 和 "I" 。
     * 因此，"*" 总共有 9 种解码方法。
     * <p>
     * 示例 2：
     * 输入：s = "1*"
     * 输出：18
     * 解释：这一条编码消息可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条。
     * 每种消息都可以由 2 种方法解码（例如，"11" 可以解码成 "AA" 或 "K"）。
     * 因此，"1*" 共有 9 * 2 = 18 种解码方法。
     * <p>
     * 示例 3：
     * 输入：s = "2*"
     * 输出：15
     * 解释：这一条编码消息可以表示 "21"、"22"、"23"、"24"、"25"、"26"、"27"、"28" 或 "29" 中的任意一条。
     * "21"、"22"、"23"、"24"、"25" 和 "26" 由 2 种解码方法，但 "27"、"28" 和 "29" 仅有 1 种解码方法。
     * 因此，"2*" 共有 (6 * 2) + (3 * 1) = 12 + 3 = 15 种解码方法。
     * <p>
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/decode-ways-ii
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param args
     */
    public static void main(String[] args) {
        System.out.println(new _639().numDecodings(
                "2839"
        ));
    }

}
