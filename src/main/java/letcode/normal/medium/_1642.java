/*
 * 版权所有（c）<2021><蔡永程>
 *
 * 反996许可证版本1.0
 *
 * 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以
 * 下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括
 * 但不限于使用、复制，修改，衍生利用、散布，发布和再许可：
 *
 * 1. 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修
 * 改。
 * 2. 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（
 * 以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区
 * 没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际
 * 劳工标准的核心公约。
 * 3. 个人或法人不得以任何方式诱导、暗示或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意
 * 直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利
 * 或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任
 * 何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证
 * 的行为的权利。
 *
 * 该授权作品是"按原样"提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵
 * 权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或
 * 本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。
 */

package letcode.normal.medium;

/**
 * @program: Leetcode
 * @description: 给你一个整数数组 heights ，表示建筑物的高度。
 * 另有一些砖块 bricks 和梯子 ladders 。
 * 你从建筑物 0 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。
 * 当从建筑物 i 移动到建筑物 i+1（下标 从 0 开始 ）时：
 * 如果当前建筑物的高度 大于或等于 下一建筑物的高度，则不需要梯子或砖块
 * 如果当前建筑的高度 小于 下一个建筑的高度，
 * 您可以使用 一架梯子 或 (h[i+1] - h[i]) 个砖块 如果以最佳方式使用给定的梯子和砖块，
 * 返回你可以到达的最远建筑物的下标（下标 从 0 开始 ）。
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/furthest-building-you-can-reach
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @author: 蔡永程
 * @create: 2020-12-08 16:50
 */
public class _1642 {


    private int tableSizeFor(int cap) {
        int n = cap - 1;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        return n + 1;
    }

    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        // 贪心：梯子尽量在落差大的地方使用
        // 从这个角度考虑 计算出上升的高度差数组
        // 按顺序将上升数组 放入
        // 8 5 15 2 16
        int[] heap = new int[tableSizeFor(heights.length - 1)];
        return 0;
    }






    /**
     * 输入：heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
     * 输出：4
     * 解释：从建筑物 0 出发，你可以按此方案完成旅程：
     * - 不使用砖块或梯子到达建筑物 1 ，因为 4 >= 2
     * - 使用 5 个砖块到达建筑物 2 。你必须使用砖块或梯子，因为 2 < 7
     * - 不使用砖块或梯子到达建筑物 3 ，因为 7 >= 6
     * - 使用唯一的梯子到达建筑物 4 。你必须使用砖块或梯子，因为 6 < 9
     * 无法越过建筑物 4 ，因为没有更多砖块或梯子。
     * <p>
     * 示例 2：
     * 输入：heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
     * 输出：7
     * <p>
     * 示例 3：
     * 输入：heights = [14,3,19,3], bricks = 17, ladders = 0
     * 输出：3
     * <p>
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/furthest-building-you-can-reach
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     */
    public static void main(String[] args) {
        System.out.println(new _1642()
                .furthestBuilding(new int[]{4, 2, 7, 6, 9, 14, 12}, 5, 1));
    }



}
