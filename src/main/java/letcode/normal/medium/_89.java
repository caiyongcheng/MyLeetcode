/*
 * 版权所有（c）<2021><蔡永程>
 *
 * 反996许可证版本1.0
 *
 * 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以
 * 下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括
 * 但不限于使用、复制，修改，衍生利用、散布，发布和再许可：
 *
 * 1. 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修
 * 改。
 * 2. 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（
 * 以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区
 * 没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际
 * 劳工标准的核心公约。
 * 3. 个人或法人不得以任何方式诱导、暗示或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意
 * 直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利
 * 或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任
 * 何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证
 * 的行为的权利。
 *
 * 该授权作品是"按原样"提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵
 * 权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或
 * 本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。
 */

package letcode.normal.medium;

import letcode.utils.TestUtil;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * n 位格雷码序列 是一个由 2n 个整数组成的序列，其中： 每个整数都在范围 [0, 2n - 1] 内（含 0 和 2n - 1）
 * 第一个整数是 0 一个整数在序列中出现 不超过一次
 * 每对 相邻 整数的二进制表示 恰好一位不同 ，且 第一个 和 最后一个 整数的二进制表示 恰好一位不同
 * 给你一个整数 n ，返回任一有效的 n 位格雷码序列 。
 * 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/gray-code 著作权归领扣网络所有。
 * 商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author CaiYongcheng
 * @since 2022-01-08 18:46
 **/
public class _89 {

    public List<Integer> grayCode(int n) {
        /*
         * 首先 对于 0 - 2^(n)-1的格雷序列 实际上 可以看作由 相同方法生成的 0 - 2^(n-1)-1的格雷序列 与 2^(n-1)到2^(n)-1的两个格雷
         * 序列拼接而成。因为是相同方法，所以两个格雷序列对应位置的数只有最高位不一样，所以只需要求0 - 2^(n-1)-1的格雷序列即可，拼接的时候
         * 要注意 0 - 2^(n-1)-1 后 跟着的是 2^(n-1)到2^(n)-1的反转序列。那么求0 - 2^(n-1)-1的格雷序列实际上就是一个相同的子问题。
         * 这时候不需要递归，因为我们知道最小的是0，1之后可以构建出对应的2，3，然后反向拼接得到 0 1 3 2。
         */
        List<Integer> ans = new ArrayList<>(1 << n);
        ans.add(0);
        if (n == 0) {
            return ans;
        }
        ans.add(1);
        if (n == 1) {
            return ans;
        }
        int scl = 2;
        int limit = 1 << n;
        while (scl < limit) {
            for (int i = scl - 1; i > -1; --i) {
                ans.add(ans.get(i) + scl);
            }
            scl = scl << 1;
        }
        return ans;
    }

    /**
     * 输入：n = 2
     * 输出：[0,1,3,2]
     * 解释：
     * [0,1,3,2] 的二进制表示是 [00,01,11,10] 。
     * - 00 和 01 有一位不同
     * - 01 和 11 有一位不同
     * - 11 和 10 有一位不同
     * - 10 和 00 有一位不同
     * [0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。
     * - 00 和 10 有一位不同
     * - 10 和 11 有一位不同
     * - 11 和 01 有一位不同
     * - 01 和 00 有一位不同
     * 示例 2：
     * <p>
     * 输入：n = 1
     * 输出：[0,1]
     * <p>
     * [0,1]
     * [0,1,3,2]
     * [0,1,3,2,7,6,5,4]
     * [0,1,3,2,7,6,5,4,15,14,13,12,11,10,9,8]
     * <p>
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/gray-code
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param args
     */
    public static void main(String[] args) {

        BigDecimal price = new BigDecimal("0.034333");
        int count = 1;
        while (count <= 200) {
            BigDecimal total = price.multiply(new BigDecimal(count));
            if (total.toString().charAt(4) == '5') {
                System.out.println(total);
                System.out.println(count);
            }
            ++count;
        }


        TestUtil.test(_89.class, "输入：n = 2 输出：[0,1,3,2] 解释： [0,1,3,2] 的二进制表示是 [00,01,11,10] 。" +
                " - 00 和 01 有一位不同 - 01 和 11 有一位不同 - 11 和 10 有一位不同 - 10 和 00 有一位不同 [0,2,3,1] " +
                "也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。 - 00 和 10 有一位不同 -" +
                " 10 和 11 有一位不同 - 11 和 01 有一位不同 - 01 和 00 有一位不同 示例 2：\n" +
                "输入：n = 1 输出：[0,1]\n" +
                "[0,1] [0,1,3,2] [0,1,3,2,7,6,5,4] [0,1,3,2,7,6,5,4,15,14,13,12,11,10,9,8]");
    }



}
