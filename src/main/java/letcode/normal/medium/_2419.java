package letcode.normal.medium;

import letcode.utils.TestUtil;

/**
 * You are given an integer array nums of size n.
 * Consider a non-empty subarray from nums that has the maximum possible bitwise AND.
 * In other words, let k be the maximum value of the bitwise AND of any subarray of nums.
 * Then, only subarrays with a bitwise AND equal to k should be considered.
 * Return the length of the longest such subarray.
 * The bitwise AND of an array is the bitwise AND of all the numbers in it.
 * A subarray is a contiguous sequence of elements within an array.
 *
 * @author 蔡永程
 * @version 1.0.0
 * @since 2025-07-30 09:07
 */
public class _2419 {

    public int longestSubarray(int[] nums) {
        int ans = 1;
        int maxNum = nums[0];
        int curLen = 0;
        for (int num : nums) {
            if (num == maxNum) {
                ++curLen;
            } else if (num > maxNum) {
                maxNum = num;
                curLen = 1;
                ans = 1;
            } else {
                ans = Math.max(ans, curLen);
                curLen = 0;
            }
        }
        return Math.max(ans, curLen);
    }

    /**
     * Example 1:
     *
     * Input: nums = [1,2,3,3,2,2]
     * Output: 2
     * Explanation:
     * The maximum possible bitwise AND of a subarray is 3.
     * The longest subarray with that value is [3,3], so we return 2.
     * Example 2:
     *
     * Input: nums = [1,2,3,4]
     * Output: 1
     * Explanation:
     * The maximum possible bitwise AND of a subarray is 4.
     * The longest subarray with that value is [4], so we return 1.
     * @param args
     */
    public static void main(String[] args) {
        TestUtil.test("=[586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,516529,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,55816,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,586730,232392,232392,294503]");
    }

}
