/*
 * 版权所有（c）<2021><蔡永程>
 *
 * 反996许可证版本1.0
 *
 * 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以
 * 下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括
 * 但不限于使用、复制，修改，衍生利用、散布，发布和再许可：
 *
 * 1. 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修
 * 改。
 * 2. 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（
 * 以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区
 * 没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际
 * 劳工标准的核心公约。
 * 3. 个人或法人不得以任何方式诱导、暗示或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意
 * 直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利
 * 或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任
 * 何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证
 * 的行为的权利。
 *
 * 该授权作品是"按原样"提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵
 * 权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或
 * 本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。
 */

package letcode.normal.medium;

/**
 * 给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。  请你找出并返回只出现一次的那个数。
 * 你设计的解决方案必须满足 O(log n) 时间复杂度和 O(1) 空间复杂度。
 * 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/single-element-in-a-sorted-array 著作权归领扣网络所有。
 * 商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author CaiYongcheng
 * @date 2022-02-14 09:03
 **/
public class _540 {

    public int singleNonDuplicate(int[] nums) {
        /**
         * 根据题意 x一定在偶数下标（从0开始）
         * 所以 数组构成是 奇数长度有序对l1 x 奇数长度有序对l2， 对于l1而言，有序对下标是（偶奇），对于l2而言则是（奇偶）
         * 每次二分 如果当前点p，不等于前一个且不等于后一个元素，那么就是x
         * 如果p点等于前一个，且p点下标是奇数，那么p点在序列l1，此时应当向后二分，否则向前二分
         * 如果p点等于后一个，且p点下标是偶数，那么p点在序列l2，此时应当向前二分，否则向后二分
         */
        int li = 0;
        int ri = nums.length - 1;
        int mid;
        while (li < ri) {
            mid = (li + ri) >>> 1;
            if (li == mid) {
                break;
            }
            if (nums[mid] == nums[mid - 1]) {
                if ((mid & 1) == 1) {
                    li = mid + 1;
                } else {
                    ri = mid - 2;
                }
            } else if (nums[mid] == nums[mid + 1]) {
                if ((mid & 1) == 1) {
                    ri = mid - 1;
                } else {
                    li = mid + 2;
                }
            } else {
                return nums[mid];
            }
        }
        return nums[li];
    }

    /**
     * 示例 1:
     * <p>
     * 输入: nums = [1,1,2,3,3,4,4,8,8]
     * 输出: 2
     * 示例 2:
     * <p>
     * 输入: nums =  [3,3,7,7,10,11,11]
     * 输出: 10
     * <p>
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/single-element-in-a-sorted-array
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param args
     */
    public static void main(String[] args) {
        System.out.println(new _540().singleNonDuplicate(
                new int[]{3, 3, 7, 7, 10, 11, 11}
        ));
    }

}
