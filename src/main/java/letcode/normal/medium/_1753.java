/*
 * 版权所有（c）<2021><蔡永程>
 *
 * 反996许可证版本1.0
 *
 * 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以
 * 下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括
 * 但不限于使用、复制，修改，衍生利用、散布，发布和再许可：
 *
 * 1. 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修
 * 改。
 * 2. 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（
 * 以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区
 * 没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际
 * 劳工标准的核心公约。
 * 3. 个人或法人不得以任何方式诱导、暗示或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意
 * 直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利
 * 或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任
 * 何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证
 * 的行为的权利。
 *
 * 该授权作品是"按原样"提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵
 * 权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或
 * 本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。
 */

package letcode.normal.medium;

/**
 * @program: MyLeetcode
 * @description: 你正在玩一个单人游戏，面前放置着大小分别为 a、b 和 c 的 三堆 石子。  
 * 每回合你都要从两个 不同的非空堆 中取出一颗石子，并在得分上加 1 分。当存在 两个或更多 的空堆时，游戏停止。 
 * 给你三个整数 a 、b 和 c ，返回可以得到的 最大分数 。  来源：力扣（LeetCode） 
 * 链接：https://leetcode-cn.com/problems/maximum-score-from-removing-stones 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @packagename: letcode.normal.medium
 * @author: 6JSh5rC456iL
 * @date: 2021-03-15 11:06
 **/
public class _1753 {


    /**
     * 其实，如果最大堆大于其他两堆和，则对多只能得到较小两堆和分数，
     * 否则可以尽量扣减三堆，如果是奇数，每次拿两个最后必剩一个，否则可以取完。
     * @param a
     * @param b
     * @param c
     * @return
     */
    public int maximumScore(int a, int b, int c) {
        int ans = 0;
        int t = 0;
        int m1, m2, m3;
        int m;
        while (true) {
            if (a >= b && a >= c) {
                m1 = a;
                if (b >= c) {
                    m2 = b;
                    m3 = c;
                } else{
                    m2 = c;
                    m3 = b;
                }
            } else if (b >= a && b >= c) {
                m1 = b;
                if (a >= c) {
                    m2 = a;
                    m3 = c;
                } else{
                    m2 = c;
                    m3 = a;
                }
            } else {
                m1 = c;
                if (a >= b) {
                    m2 = a;
                    m3 = b;
                } else{
                    m2 = b;
                    m3 = a;
                }
            }
            if (m3 == 0 && m2 == 0) {
                break;
            }
            m = m3 == 0 ? m2 : m2 - m3 + 1;
            m2 -= m;
            m1 -= m;
            ans += m;
            a = m1;
            b = m2;
            c = m3;
        }
        return ans;
    }

    /**
     * 示例 1：
     *
     * 输入：a = 2, b = 4, c = 6
     * 输出：6
     * 解释：石子起始状态是 (2, 4, 6) ，最优的一组操作是：
     * - 从第一和第三堆取，石子状态现在是 (1, 4, 5)
     * - 从第一和第三堆取，石子状态现在是 (0, 4, 4)
     * - 从第二和第三堆取，石子状态现在是 (0, 3, 3)
     * - 从第二和第三堆取，石子状态现在是 (0, 2, 2)
     * - 从第二和第三堆取，石子状态现在是 (0, 1, 1)
     * - 从第二和第三堆取，石子状态现在是 (0, 0, 0)
     * 总分：6 分 。
     *
     * 示例 2：
     * 输入：a = 4, b = 4, c = 6
     * 输出：7
     * 解释：石子起始状态是 (4, 4, 6) ，最优的一组操作是：
     * - 从第一和第二堆取，石子状态现在是 (3, 3, 6)
     * - 从第一和第三堆取，石子状态现在是 (2, 3, 5)
     * - 从第一和第三堆取，石子状态现在是 (1, 3, 4)
     * - 从第一和第三堆取，石子状态现在是 (0, 3, 3)
     * - 从第二和第三堆取，石子状态现在是 (0, 2, 2)
     * - 从第二和第三堆取，石子状态现在是 (0, 1, 1)
     * - 从第二和第三堆取，石子状态现在是 (0, 0, 0)
     * 总分：7 分 。
     *
     * 示例 3：
     * 输入：a = 1, b = 8, c = 8
     * 输出：8
     * 解释：最优的一组操作是连续从第二和第三堆取 8 回合，直到将它们取空。
     * 注意，由于第二和第三堆已经空了，游戏结束，不能继续从第一堆中取石子
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/maximum-score-from-removing-stones
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     * @param args
     */
    public static void main(String[] args) {
        System.out.println(new _1753().maximumScore(1,2,8));
    }

}
