/*
 * 版权所有（c）<2021><蔡永程>
 *
 * 反996许可证版本1.0
 *
 * 在符合下列条件的情况下，特此免费向任何得到本授权作品的副本（包括源代码、文件和/或相关内容，以
 * 下统称为“授权作品”）的个人和法人实体授权：被授权个人或法人实体有权以任何目的处置授权作品，包括
 * 但不限于使用、复制，修改，衍生利用、散布，发布和再许可：
 *
 * 1. 个人或法人实体必须在许可作品的每个再散布或衍生副本上包含以上版权声明和本许可证，不得自行修
 * 改。
 * 2. 个人或法人实体必须严格遵守与个人实际所在地或个人出生地或归化地、或法人实体注册地或经营地（
 * 以较严格者为准）的司法管辖区所有适用的与劳动和就业相关法律、法规、规则和标准。如果该司法管辖区
 * 没有此类法律、法规、规章和标准或其法律、法规、规章和标准不可执行，则个人或法人实体必须遵守国际
 * 劳工标准的核心公约。
 * 3. 个人或法人不得以任何方式诱导、暗示或强迫其全职或兼职员工或其独立承包人以口头或书面形式同意
 * 直接或间接限制、削弱或放弃其所拥有的，受相关与劳动和就业有关的法律、法规、规则和标准保护的权利
 * 或补救措施，无论该等书面或口头协议是否被该司法管辖区的法律所承认，该等个人或法人实体也不得以任
 * 何方法限制其雇员或独立承包人向版权持有人或监督许可证合规情况的有关当局报告或投诉上述违反许可证
 * 的行为的权利。
 *
 * 该授权作品是"按原样"提供，不做任何明示或暗示的保证，包括但不限于对适销性、特定用途适用性和非侵
 * 权性的保证。在任何情况下，无论是在合同诉讼、侵权诉讼或其他诉讼中，版权持有人均不承担因本软件或
 * 本软件的使用或其他交易而产生、引起或与之相关的任何索赔、损害或其他责任。
 */

package letcode.normal.medium;

/**
 * 假设有从 1 到 N 的N个整数，如果从这N个数字中成功构造出一个数组，
 * 使得数组的第 i位 (1 <= i <= N) 满足如下两个条件中的一个，
 * 我们就称这个数组为一个优美的排列。条件：  第i位的数字能被i整除 i 能被第 i 位上的数字整除 现在给定一个整数 N，请问可以构造多少个优美的排列？  
 * 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/beautiful-arrangement 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author CaiYongcheng
 * @date 2021-08-16 16:18
 **/
public class _526FiveHundredTwentySix {

    /**
     * 其中 {num}({mask})num(mask) 表示二进制数 {mask}mask 中 11 的个数，x \mid yx∣y 表示 xx 可以整除 yy。
     *
     * 状态转移方程的含义为，当我们想要计算 f[{mask}]f[mask] 时，我们只需要在前 {num}({mask}) - 1num(mask)−1 位都已经放置了数的情况下，考虑第 {num}({mask})num(mask) 位要放置的数即可，我们枚举当前位的符合条件的数，并将方案数累加到 f[{mask}]f[mask] 中即可。
     *
     * 作者：LeetCode-Solution
     * 链接：https://leetcode-cn.com/problems/beautiful-arrangement/solution/you-mei-de-pai-lie-by-leetcode-solution-vea2/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     * @param n
     * @return
     */
    public int countArrangement(int n) {
        /*
         * num 表示当前要放入的数
         * mask 的二进制表示数的分布
         * 所以num可能放在mask二进制位1的位置上
         */
        int[] f = new int[1 << n];
        f[0] = 1;
        for (int mask = 1; mask < (1 << n); mask++) {
            //当前要放入的数
            int num = Integer.bitCount(mask);
            for (int i = 0; i < n; i++) {
                //i+1位上有数，并且第i+1位上的数可以是num
                if ((mask & (1 << i)) != 0 && ((num % (i + 1)) == 0 || (i + 1) % num == 0)) {
                    //第i+1位上没有数，且当前放入的数是num-1
                    f[mask] += f[mask ^ (1 << i)];
                }
            }
        }
        return f[(1 << n) - 1];
    }

    public static void main(String[] args) {

    }


}
